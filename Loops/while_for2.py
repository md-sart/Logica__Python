# **While** e **For** Loops

#Instru√ß√µes `while` e `for` permitem implementar *la√ßos* de execu√ß√£o nos programas, os chamados *loops* \*. S√£o blocos de instru√ß√µes que se repetem at√© satisfazer alguma condi√ß√£o com chegar a um determinado valor ou √≠ndice.

#Os *loops* s√£o muito √∫teis para codificar situa√ß√µes repetitivas sem a necessidade de extensas linhas de c√≥digo que se repetem.

#\* *n√£o confunda, √†s vezes tamb√©m empregamos o t√™rmo 'loop' para quando um programa, geralmente por erro, 'n√£o para'.*

# Exerc√≠cio 1

#Escreva um programa que apresente todos os √≠mpares de 1 at√© 99.


# Loop de 1 a 99 (exclusivo)
for i in range(1, 100):
    # Verifica se o n√∫mero √© √≠mpar (resto da divis√£o por 2 n√£o √© zero)
    if i % 2 != 0:
        # Se for √≠mpar, imprime o n√∫mero
        print(i)

# Exerc√≠cio 2

#Escreva um programa que apresente os n (1 <= n <= 20) primeiros termos da seguinte sequ√™ncia: 1, 4, 9, 16, 25, ...

# Loop de 1 a 20 (inclusive)
for i in range(1, 21):
    # Eleva o n√∫mero atual ao quadrado usando ** e armazena o resultado na vari√°vel 'n'
    n = i ** 2
    # Imprime o resultado
    print(n)

# Exerc√≠cio 3

#Fa√ßa um programa que calcule e apresente o fatorial de um n√∫mero inteiro e natural fornecido pelo usu√°rio.

#Exemplo: 5! = 5 x 4 x 3 x 2 x 1 = 120.
#Por defini√ß√£o 0! = 1.

# Solicita ao usu√°rio que insira um n√∫mero inteiro e natural e o armazena na vari√°vel 'numero'
numero = int(input("Digite um n√∫mero inteiro e natural: "))

# Verifica se o n√∫mero digitado √© igual a zero
if numero == 0:
    # Se for igual a zero, imprime o fatorial de zero, que √© 1
    print("0! = 1")
else:
    # Se o n√∫mero for diferente de zero, inicializa a vari√°vel 'resultado' com 1
    resultado = 1

    # Loop para calcular o fatorial do n√∫mero
    for i in range(1, numero + 1):
        resultado *= i  # Multiplica 'resultado' pelo valor de 'i' em cada itera√ß√£o

    # Imprime o resultado do fatorial do n√∫mero digitado
    print("O fatorial de", numero, "√©", resultado)

# Exerc√≠cio 4
#A convers√£o de graus Fahrenheit para Celsius √© obtida pela f√≥rmula:
#$$ùê∂ = \frac{5}{9}(ùêπ ‚àí 32)$$

#Escreva um programa que calcule e apresente uma tabela de graus Celsius em fun√ß√£o de graus Fahrenheit que variem de 50 a 150, de 1 em 1.

# Loop de 50 a 150 (inclusive) para valores de Fahrenheit
for fahrenheit in range(50, 151):
    # F√≥rmula de convers√£o de Fahrenheit para Celsius
    celsius = (5/9) * (fahrenheit - 32)
    # Imprime os valores de Fahrenheit e Celsius formatados com 2 casas decimais
    print(f"Fahrenheit: {fahrenheit}, Celsius: {celsius:.2f}")

# Exerc√≠cio 5 RESOLVIDO
#Elabore um programa que calcule e apresente o valor de S, dado por:
#$$ùëÜ = \frac{1}{N} + \frac{2}{N-1} + \frac{3}{N-2} + ... + \frac{N-1}{2} + N$$
#Sendo N fornecido pelo usu√°rio.


# Solicita ao usu√°rio que insira o valor de 'n' e converte para inteiro
n = int(input("Digite o valor de n: "))

# Inicializa a vari√°vel 'S' para armazenar a soma
S = 0

# Inicializa a vari√°vel 'denominador' com o valor de 'n'
denominador = n

# Loop de 1 at√© 'n'
for i in range(1, n + 1, 1):
    # Imprime o termo atual da s√©rie
    print("termo", i, "=", i, "/", denominador)

    # Calcula o valor do termo atual e adiciona √† soma
    S = S + i / denominador

    # Decrementa o denominador para o pr√≥ximo termo
    denominador = denominador - 1

# Imprime a soma com duas casas decimais
print("\nA soma √©", "%.2f" % S)